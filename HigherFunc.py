# def f(x):
#     return x*x
# print(f(5))

# –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –≤—ã–≤–µ—Å—Ç–∏ –∏—Ö, –∞ —Ç–∞–∫–∂–µ –∫–≤–∞–¥—Ä–∞—Ç —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞
# list_1=[1, 2, 3, 5, 8, 15, 23, 38]
# res=list()
# for i in list_1:
#     if i%2==0:
#         res.append((i, i**2))
# print(res)

# –í –¥–∞–Ω–Ω–æ–º –∫–æ–¥–µ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–∑ –Ω–∞—á–∞–ª–∞ –∫–æ–¥–∞ –∏ –∑–∞–º–µ–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é  select –Ω–∞ map. 
# def select(f, col):
#     return [f(x) for x in col]
# def where(f, col):
#     return [x for x in col if f(x)]
# list_1=[1, 2, 3, 5, 8, 15, 23, 38]
# res=select(int, list_1)
# print(res)
# res=where(lambda x: x%2==0, res)
# print(res)
# res=list(select(lambda x: (x, x**2), res))
# print(res)

# s='hgaGDkjh^&%$hgKG'
# while len(s)>0:
#     bukva=s[0]
#     if bukva>='a' and bukva<='z':
#         print(bukva, 'small')
#     elif bukva>='A' and bukva<='Z':
#         print(bukva,'big')
#     elif bukva.isdigit():
#         print(bukva,'digit')
#     else:
#         print(bukva,'znak')
#     s=s[1:]

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é print_operation_table(operation, num_rows, num_columns), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é, –≤—ã—á–∏—Å–ª—è—é—â—É—é —ç–ª–µ–º–µ–Ω—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ –∏ —Å—Ç—Ä–æ–∫–∏ = 9.–ê—Ä–≥—É–º–µ–Ω—Ç—ã num_rows –∏ num_columns —É–∫–∞–∑—ã–≤–∞—é—Ç —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω—ã.–ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏–¥–µ—Ç —Å –µ–¥–∏–Ω–∏—Ü—ã (–ø–æ–¥—É–º–∞–π—Ç–µ, –ø–æ—á–µ–º—É –Ω–µ —Å –Ω—É–ª—è).–ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –º–µ–Ω—å—à–µ –¥–≤—É—Ö, –≤—ã–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –û–®–ò–ë–ö–ê! –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 2!.–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –±–∏–Ω–∞—Ä–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª—é–±–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è, —É –∫–æ—Ç–æ—Ä–æ–π —Ä–æ–≤–Ω–æ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞, –∫–∞–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, —É –æ–ø–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–∂–µ–Ω–∏—è.–ú–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–æ–±–µ–ª, –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–±–µ–ª –Ω–µ –Ω—É–∂–µ–Ω.
# def print_operation_table(operation, num_rows = 9, num_columns = 9): 
#     if num_rows <2 or num_columns <2:  
#         print('–û–®–ò–ë–ö–ê! –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–æ–ª—å—à–µ 2!')
#     else:
#         for i in range(1, num_rows + 1):
#             lst=[]
#             for j in range(1,num_columns + 1):
#                 lst.append((operation)(i, j))
#             # ls=lst
#             # ls.rjust(16,' ')
#             print(*ls)
        
# print_operation_table(lambda x, y: x * y, 6, 6)

# –ó–∞–¥–∞—á–∞ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è(—Å–º.–∫–æ–Ω–µ—Ü –ª–µ–∫—Ü–∏–∏ 7)
# values = [0, 2, 10 ,6, 4, 8]
# if len(values) == len(list(filter(lambda x: x % 2 == 0, values))):
# print('same')
# else:
# print('different')

# def same_by(op, x):
# return len(list(filter(op, x))) == len(x)


# if (same_by(lambda x: x % 2 == 0, values)):
# print('same', 'üëç')
# else:
# print('different', 'üëé')


       
                

#–í–∏–Ω–Ω–∏-–ü—É—Ö –ø–æ–ø—Ä–æ—Å–∏–ª –í–∞—Å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –µ—Å—Ç—å –ª–∏ –≤ –µ–≥–æ —Å—Ç–∏—Ö–∞—Ö —Ä–∏—Ç–º. –ü–æ—Å–∫–æ–ª—å–∫—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –µ–≥–æ –∫—Ä–∏—á–∞–ª–∫–∞—Ö –Ω–µ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ª–µ–≥–∫–æ –æ–Ω –∏—Ö –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç, –í–∞–º —Å—Ç–æ–∏—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É.–í–∏–Ω–Ω–∏-–ü—É—Ö —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —Ä–∏—Ç–º –µ—Å—Ç—å, –µ—Å–ª–∏ —á–∏—Å–ª–æ —Å–ª–æ–≥–æ–≤ (—Ç.–µ. —á–∏—Å–ª–æ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤) –≤ –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑–µ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ.–§—Ä–∞–∑–∞ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞, –µ—Å–ª–∏ –≤–æ —Ñ—Ä–∞–∑–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, —Ç–æ –æ–Ω–∏ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –¥–µ—Ñ–∏—Å–∞–º–∏.–§—Ä–∞–∑—ã –æ—Ç–¥–µ–ª—è—é—Ç—Å—è –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ –ø—Ä–æ–±–µ–ª–∞–º–∏.–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –í–∏–Ω–Ω–∏-–ü—É—Ö –ø–µ—Ä–µ–¥–∞—Å—Ç –≤–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é stroka –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏. –í –æ—Ç–≤–µ—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ –ü–∞—Ä–∞–º –ø–∞–º-–ø–∞–º, –µ—Å–ª–∏ —Å —Ä–∏—Ç–º–æ–º –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ –∏ –ü–∞–º –ø–∞—Ä–∞–º, –µ—Å–ª–∏ —Å —Ä–∏—Ç–º–æ–º –≤—Å–µ –Ω–µ –≤ –ø–æ—Ä—è–¥–∫–µ.–ï—Å–ª–∏ —Ñ—Ä–∞–∑–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞, —Ç–æ —Ä–∏—Ç–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π!

#st = '–ø–∞—Ä–∞-—Ä–∞–º–∞'.split()
# if len(st)>1:
#     ls=[]
#     for i in st:
#         ls.append(len([1 for x in i if x in '–∞—É–æ—ã–∏—ç—è—é—ë–µ']))
#     #if len(set(ls))==1:
#     if max(ls)==min(ls):
#         print('–ü–∞—Ä–∞–º –ø–∞–º-–ø–∞–º')
#     else:
#         print('–ü–∞–º –ø–∞—Ä–∞–º')
# else:
#     print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä–∞–∑ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π!')

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
