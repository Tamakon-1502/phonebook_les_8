# Задача No45. Общее обсуждение. Два различных натуральных числа n и m называются дружественными, если сумма делителей числа n (включая 1, но исключая само n) равна числу m и наоборот. Например, 220 и 284 – дружественные числа. По данному числу k выведите все пары дружественных чисел, каждое из которых не превосходит k. Программа получает на вход одно натуральное число k, не превосходящее 105. Программа должна вывести все пары дружественных чисел, каждое из которых не превосходит k. Пары необходимо выводить по одной в строке, разделяя пробелами. Каждая пара должна быть выведена только один раз (перестановка чисел новую пару не дает).
# Ввод: Вывод:
# 300 220 284
# n = int(input())
# list_1 = list()
# for i in range(n):
#     summa = 0
#     for j in range(1, i // 2 + 1):
#         if i % j == 0:
#             summa += j
#     list_1.append(tuple([i, summa]))
# for i in range(len(list_1)):
#     for j in range(i, len(list_1)):
#         if i != j and list_1[i][0] == list_1[j][1] and list_1[i][1] == list_1[j][0]:
#             print(*list_1[i])

#Заполните массив элементами арифметической прогрессии. Её первый элемент a1 , разность d и количество элементов n будет задано автоматически. Формула для получения n-го члена прогрессии: an = a1 + (n-1) * d.
# a1 = 3
# d = 5
# n = 7
# #arr=[]
# for i in range (n):
#     print(a1+i*d, end=' ')

#Определить индексы элементов массива (списка), значения которых принадлежат заданному диапазону (т.е. не меньше заданного минимума и не больше заданного максимума).На вход подается список с элементамиlist_1 и границы диапазона в виде чисел min_number, max_number.
# list_1 = [-5, 9, 0, 3, -1, -2, 1, 4, -2, 10, 2, 0, -9, 8, 10, -9, 0, -5, -5, 7]
# min_number = 0
# max_number = 10 
# for i in range(len(list_1)):
#     if list_1[i]>=min_number:
#         if list_1[i]<=max_number:
#             print(i, end=' ')

# Возвращает квадрат числа
# def a (x):
#     return x**2
# v=a(4)
# print(v)

# Задача №47. Решение в группах
# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине программы используется множество раз и вы не хотите ничего сломать):transformation = <???> values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] или любой другой список transormed_values = list(map(transformation, values))/ Единственный способ вашего взаимодействия с этим кодом - посредством задания функции transformation. Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать список значений, а нужно получить его как есть. Напишите такое лямбда-выражение ransformation, чтобы transformed_values получился копией values. Пример ввода и вывода данных представлены на следующем слайде/
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
# transformation = lambda x: x
# transformed_values = list(map(transformation, values))
# if values == transformed_values:
#     print('ok')
# else:
#     print('fail')

# Задача №49. Решение в группах
# Планеты вращаются вокруг звезд по эллиптическим орбитам. Назовем самой далекой планетой ту, орбита которой имеет самую большую площадь. Напишите функцию find_farthest_orbit(list_of_orbits), которая среди списка орбит планет найдет ту, по которой вращается самая далекая планета. Круговые орбиты не учитывайте: вы знаете, что у вашей звезды таких планет нет, зато искусственные спутники были запущены на круговые орбиты. Результатом функции должен быть кортеж, содержащий длины полуосей эллипса орбиты самой далекой планеты. Каждая орбита представляет из себя кортеж из пары чисел - полуосей ее эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b, где a и b - длины полуосей эллипса. При решении задачи используйте списочные выражения. Подсказка: проще всего будет найти эллипс в два шага: сначала вычислить самую большую площадь эллипса, а затем найти и сам эллипс, имеющий такую площадь. Гарантируется, что самая далекая планета ровно одна. Пример ввода и вывода данных представлены на следующем слайде.
##listOrbits = [(1, 3),(2.5, 10),(7, 2),(6, 6),(4, 3), (9, 10), (10, 10)]
# def findFarOrbit(listOrbits):
# #     return max([orbit for orbit in listOrbits if orbit[0] != orbit[1]], key=lambda x: x[0] * x[1])
 
# # print(findFarOrbit(listOrbits))
##print(max(listOrbits, key=lambda x: x[0] * x[1]*(x[0]!= x[1])))

# Выводит список а и b в разных строках
# a = [1, 2, 3, 4, 5, 6, 7]
# b = list(map(lambda x: x**2, a))
# print('a = {}\nb = {}'.format(a, b))

# s='hgaGDkjh^&%$hgKG'
# while len(s)>0:
#     bukva=s[0]
#     if bukva>='a' and bukva<='z':
#         print(bukva, 'small')
#     elif bukva>='A' and bukva<='Z':
#         print(bukva,'big')
#     elif bukva.isdigit():
#         print(bukva,'digit')
#     else:
#         print(bukva,'znak')
#     s=s[1:]

#Високосный или нет введенный год.
# year=int(input('Ведите год в формате YYYY:'))
# if year % 4 !=0 or year % 100 == 0 and year % 400 != 0:
#     print('Обычный год')
# else:
#     print('Високосный год')

# num=64
# name='Bob'
# if num>30:
#     if num <50:
#         print('Вариант 1')
#     elif name > 'Markus':
#         print('Вариант 2')
#     else:
#         print('Вариант 3')
# elif name < 'Markus':
#     print('Вариант 4')
# elif num != 42:
#     print('Вариант 5')
# else:
#     print('Вариант 6')

# Задача про пингвинов
import random
lst = ['robot'] * 10
lst += ['human'] * 10
random.shuffle(lst)
data = pd.DataFrame({'whoAmI':lst})
data.head(100)
for i in lst:
    if i=='robot':
        print('0')
else:
    print('1')
